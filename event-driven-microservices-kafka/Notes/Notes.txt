Patterns Used in Microservices
	Externalized COnfig -> Spring Cloud Config
	API Versioning
	Service Discovery	-> Eureka
	API Gateway			-> Spring Cloud Gateway
	Circuit Breaker		-> Spring Cloud Gateway and Resillience4j
	Rate-Limiting		-> Spring Cloud Gateway and Redis
	Event Sourcing		-> Kafka
	CQRS (Command Query Responsibility Segregation)						-> Kafka and Elasticsearch
	Authentication and Authorization with OAuth 2.0 and Open Id Connect	-> Keycloak Authz Server
	Monitoring			-> Spring Boot Actuator, Prometheus and Grafana
	Distributed Tracing, Log Aggregation and Visualization				-> Spring Cloud Sleuth, Zipkin, Elasticsearch, Logstash and Kibana
	
	
Kafka
	Immutable, append-only logs
	Fast, resilient, scalable, high throughput
	Relies on file system for storing and caching messages
	Resilient and fault-tolerant by replication
	Disk caching, memory mapped files instead of GC eligible memory
		Memory mapped files are virtual
		Accessing them in faster than disk
	Scale by partitions
	Ordered inside partition -> ordering of data is possible only within single partition. This startegy is called Preserve Ordering
	As an event store
	
	Kafka Producer
		Has buffers of records per topic partition which are sized at batch.size property. Size is directly proportional to throughout
		Using a larger batch.size makes compression more efficient and if a data is larger than batch.size, it will not be batched
		Under heavy load, data will most probably will be batched. However, under light load, data may not be batched. In that case, increasing linger.ms property can increase throughput by increasing batching with fewer requests and with an increased latency on producer send
		max.in.flight.requests.per.connection property -> Use to limit the request number on producer
		ack=all property -> (Default)Producer will wait until, all replicas to return a result. By setting to 1, only the broker that gets the request will send confirmation
		compression.type property -> allows to set compression 
			on producer -> Default is none. Possible values - none, gzip, snappy, lz4
			on consumer -> Comprossed data will be sent from producer, then goes to topic and then to cosnumer in compressed format. This enables end-to-end compression and also share the same compressed data without re-running the compression
		request.timeout.ms -> Default is 30 seconds. It's client property and causes client to wait that much time for the server to respond to a request
		retries -> Causes a retry, if producer does not get an ack from kafka broker. Default is 0. If retries are allowed, batching is not possible
		partintioner.class -> Sets the partition startegy. Default is org.apache.kafka.clients.producer.internals.DefaultPartitioner (Round-Robin)
		
	Kafka Confluent - kafkacat / kcat
		https://docs.confluent.io/platform/current/app-development/kafkacat-usage.html
		https://hub.docker.com/r/confluentinc/cp-kafkacat
		
		Install the kcat image from above url
		To view the brokers
			docker run -it --network=host confluentinc/cp-kafkacat kafkacat -L -b localhost:19092
			
		https://avro.apache.org/docs/1.10.2/gettingstartedjava.html
		
	Kafka Admin
		For creating Topics and monitoring
		
		

	Terminologies
		Brokers
		Topics
		Partitions
		Producer
		Consumer
		Spring Kafka
		
Elasticsearch
	Open source search engine
	Apache Lucene -> high performance full featured search engine
	Organize your data and make it easily accessible
	Easy RESTful API based on JSON
	Easy scale
	Type guessing, dynamic mapping and Lucene standard analyses
	Query DSL for complex queries
	
resilience4j:
  circuitbreaker:
    configs:
      default:
        failureRateThreshold: 50                 #  Configures the failure rate threshold in percentage. When the failure rate is equal or greater than the threshold the CircuitBreaker transitions to open and starts short-circuiting calls.
        slowCallRateThreshold: 50                # Configures a threshold in percentage. The CircuitBreaker considers a call as slow when the call duration is greater than slowCallDurationThreshold
        slowCallDurationThreshold: PT5S          # Configures the duration threshold above which calls are considered as slow and increase the rate of slow calls.
        permittedNumberOfCallsInHalfOpenState: 3 # Configures the number of permitted calls when the CircuitBreaker is half open.
        slidingWindowType: COUNT_BASED           # If the sliding window is COUNT_BASED, the last slidingWindowSize calls are recorded and aggregated.
        slidingWindowSize: 10                    # Configures the size of the sliding window which is used to record the outcome of calls when the CircuitBreaker is closed.
        minimumNumberOfCalls: 2                  # Configures the minimum number of calls which are required (per sliding window period) before the CircuitBreaker can calculate the error rate or slow call rate.
        waitDurationInOpenState: PT5S            # The time that the CircuitBreaker should wait before transitioning from open to half-open.
        recordExceptions:                        # A list of exceptions that are recorded as a failure and thus increase the failure rate. Any exception matching or inheriting from one of the list counts as a failure, unless explicitly ignored via ignoreExceptions.
        ignoreExceptions:                        # A list of exceptions that are ignored and neither count as a failure nor success. Any exception matching or inheriting from one of the list will not count as a failure nor success, even if the exceptions is part of recordExceptions
    instances:
      demoServiceCircuitBreaker:
        baseConfig: default